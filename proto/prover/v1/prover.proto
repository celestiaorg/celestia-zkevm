syntax = "proto3";

package celestia.prover.v1;

option go_package = "provers/client";

service Prover {
  rpc Info(InfoRequest) returns (InfoResponse);
  rpc ProveStateTransition(ProveStateTransitionRequest)
      returns (ProveStateTransitionResponse);
  rpc ProveStateMembership(ProveStateMembershipRequest)
      returns (ProveStateMembershipResponse);
  
  // Proof store query methods
  rpc GetBlockProof(GetBlockProofRequest) returns (GetBlockProofResponse);
  rpc GetBlockProofsInRange(GetBlockProofsInRangeRequest) returns (GetBlockProofsInRangeResponse);
  rpc GetRangeProof(GetRangeProofRequest) returns (GetRangeProofResponse);
  rpc GetLatestBlockProof(GetLatestBlockProofRequest) returns (GetLatestBlockProofResponse);
  
  // Proof aggregation method
  rpc AggregateBlockProofs(AggregateBlockProofsRequest) returns (AggregateBlockProofsResponse);
}

message InfoRequest {}

message InfoResponse {
  // TODO: add more info here as is relevant such as the circuit and state
  // machine types hex-encoded state transition verifier key
  string state_transition_verifier_key = 1;
  // hex-encoded state membership verifier key
  string state_membership_verifier_key = 2;
}

message ProveStateTransitionRequest {
  // For EVM chains this is the Tendermint light client contract address.
  // For Tendermint chains this is the client ID.
  string client_id = 1;
}

message ProveStateTransitionResponse {
  bytes proof = 1;
  bytes public_values = 2;
}

message ProveStateMembershipRequest {
  // For EVM chains this is the Tendermint light client contract address.
  // For Tendermint chains this is the client ID.
  string client_id = 1;
  repeated string key_paths = 2;
}

message ProveStateMembershipResponse {
  bytes proof = 1;
  int64 height = 2;
}

// Proof store query messages
message GetBlockProofRequest {
  uint64 celestia_height = 1;
}

message GetBlockProofResponse {
  StoredBlockProof proof = 1;
}

message GetBlockProofsInRangeRequest {
  uint64 start_height = 1;
  uint64 end_height = 2;
}

message GetBlockProofsInRangeResponse {
  repeated StoredBlockProof proofs = 1;
}

message GetRangeProofRequest {
  uint64 start_height = 1;
  uint64 end_height = 2;
}

message GetRangeProofResponse {
  repeated StoredRangeProof proofs = 1;
}

message GetLatestBlockProofRequest {}

message GetLatestBlockProofResponse {
  StoredBlockProof proof = 1;
}

message StoredBlockProof {
  uint64 celestia_height = 1;
  bytes proof_data = 2;
  bytes public_values = 3;
  uint64 created_at = 4;
}

message StoredRangeProof {
  uint64 start_height = 1;
  uint64 end_height = 2;
  bytes proof_data = 3;
  bytes public_values = 4;
  uint64 created_at = 5;
}

message AggregateBlockProofsRequest {
  uint64 start_height = 1;
  uint64 end_height = 2;
}

message AggregateBlockProofsResponse {
  bytes proof = 1;
  bytes public_values = 2;
}
