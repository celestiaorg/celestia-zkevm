// @generated
// This file is @generated by prost-build.
/// EventCreateZKExecutionISM defines the event type emitted when creating a new
/// ZKExecutionISM.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventCreateZkExecutionIsm {
    /// unique hyperlane identifier
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// the owner or creator of the ism
    #[prost(string, tag="2")]
    pub owner: ::prost::alloc::string::String,
    /// state commitment root of the remote chain
    #[prost(string, tag="3")]
    pub state_root: ::prost::alloc::string::String,
    /// latest tracked height of the remote chain
    #[prost(uint64, tag="4")]
    pub height: u64,
    /// trusted celestia header hash
    #[prost(string, tag="5")]
    pub celestia_header_hash: ::prost::alloc::string::String,
    /// trusted celestia height
    #[prost(uint64, tag="6")]
    pub celestia_height: u64,
    /// the celestia namespace identifier used by the application (hex-encoded)
    #[prost(string, tag="7")]
    pub namespace: ::prost::alloc::string::String,
    /// the public key of the sequencer (hex-encoded)
    #[prost(string, tag="8")]
    pub sequencer_public_key: ::prost::alloc::string::String,
    /// the sp1 groth16 verifier key (hex-encoded)
    #[prost(string, tag="9")]
    pub groth16_vkey: ::prost::alloc::string::String,
    /// hash-based commitment to the verifier key used for state transition
    /// (hex-encoded)
    #[prost(string, tag="10")]
    pub state_transition_vkey: ::prost::alloc::string::String,
    /// hash-based commitment to the verifier key used for state membership
    /// (hex-encoded)
    #[prost(string, tag="11")]
    pub state_membership_vkey: ::prost::alloc::string::String,
}
/// EventUpdateZKExecutionISM defines the event type emitted when updating a
/// ZKExecutionISM.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventUpdateZkExecutionIsm {
    /// unique hyperlane identifier
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// state commitment root of the remote chain
    #[prost(string, tag="2")]
    pub state_root: ::prost::alloc::string::String,
    /// latest tracked height of the remote chain
    #[prost(uint64, tag="3")]
    pub height: u64,
    /// trusted celestia header hash
    #[prost(string, tag="4")]
    pub celestia_header_hash: ::prost::alloc::string::String,
    /// trusted celestia height
    #[prost(uint64, tag="5")]
    pub celestia_height: u64,
}
/// EventSubmitMessages defines the event type emitted after successful message
/// submission.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventSubmitMessages {
    /// unique hyperlane identifier
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// state commitment root used to verify messages (hex-encoded)
    #[prost(string, tag="2")]
    pub state_root: ::prost::alloc::string::String,
    /// list of authorized messages ids
    #[prost(string, repeated, tag="3")]
    pub messages: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// ZKExecutionISM defines the Hyperlane interchain security module (ISM).
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ZkExecutionIsm {
    /// unique hyperlane identifier
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// the owner or creator of the ism
    #[prost(string, tag="2")]
    pub owner: ::prost::alloc::string::String,
    /// state commitment root of the remote chain
    #[prost(bytes="vec", tag="3")]
    pub state_root: ::prost::alloc::vec::Vec<u8>,
    /// latest tracked height of the remote chain
    #[prost(uint64, tag="4")]
    pub height: u64,
    /// trusted celestia header hash
    #[prost(bytes="vec", tag="5")]
    pub celestia_header_hash: ::prost::alloc::vec::Vec<u8>,
    /// trusted celestia height
    #[prost(uint64, tag="6")]
    pub celestia_height: u64,
    /// the celestia namespace identifier used by the application
    #[prost(bytes="vec", tag="7")]
    pub namespace: ::prost::alloc::vec::Vec<u8>,
    /// the public key of the sequencer
    #[prost(bytes="vec", tag="8")]
    pub sequencer_public_key: ::prost::alloc::vec::Vec<u8>,
    /// the sp1 groth16 verifier key
    #[prost(bytes="vec", tag="9")]
    pub groth16_vkey: ::prost::alloc::vec::Vec<u8>,
    /// hash-based commitment to the verifier key used for state transition
    #[prost(bytes="vec", tag="10")]
    pub state_transition_vkey: ::prost::alloc::vec::Vec<u8>,
    /// hash-based commitment to the verifier key used for state membership
    #[prost(bytes="vec", tag="11")]
    pub state_membership_vkey: ::prost::alloc::vec::Vec<u8>,
}
/// Params defines the zk ism module parameters.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Params {
    #[prost(uint32, tag="1")]
    pub max_header_hashes: u32,
}
/// GenesisState defines the zkism module's genesis state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// list of zk execution isms.
    #[prost(message, repeated, tag="1")]
    pub isms: ::prost::alloc::vec::Vec<ZkExecutionIsm>,
    /// TODO: add messages to genesis state
    /// params is the module parameters.
    #[prost(message, optional, tag="2")]
    pub params: ::core::option::Option<Params>,
}
/// QueryIsmRequest is the request type for the Ism rpc method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryIsmRequest {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
/// QueryIsmResponse is the response type for the Ism rpc method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryIsmResponse {
    #[prost(message, optional, tag="1")]
    pub ism: ::core::option::Option<ZkExecutionIsm>,
}
/// QueryIsmsRequest is the request type for the Isms rpc method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryIsmsRequest {
    /// pagination defines an optional pagination for the request.
    #[prost(message, optional, tag="1")]
    pub pagination: ::core::option::Option<super::super::super::cosmos::base::query::v1beta1::PageRequest>,
}
/// QueryIsmsResponse is the response type for the Isms rpc method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryIsmsResponse {
    /// isms is a list of zk execution isms.
    #[prost(message, repeated, tag="1")]
    pub isms: ::prost::alloc::vec::Vec<ZkExecutionIsm>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag="2")]
    pub pagination: ::core::option::Option<super::super::super::cosmos::base::query::v1beta1::PageResponse>,
}
/// QueryParamsRequest is the request type for the Params rpc method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {
}
/// QueryParamsResponse is the response type for the Params rpc method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    /// params contains the module parameters
    #[prost(message, optional, tag="1")]
    pub params: ::core::option::Option<Params>,
}
/// MsgCreateZKExecutionISM is the request type for CreateZKExecutionISM.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreateZkExecutionIsm {
    /// creator is the message sender.
    #[prost(string, tag="1")]
    pub creator: ::prost::alloc::string::String,
    /// state commitment root of the remote chain
    #[prost(bytes="vec", tag="2")]
    pub state_root: ::prost::alloc::vec::Vec<u8>,
    /// latest tracked height of the remote chain
    #[prost(uint64, tag="3")]
    pub height: u64,
    /// trusted celestia header hash
    #[prost(bytes="vec", tag="4")]
    pub celestia_header_hash: ::prost::alloc::vec::Vec<u8>,
    /// trusted celestia height
    #[prost(uint64, tag="5")]
    pub celestia_height: u64,
    /// the celestia namespace identifier used by the application
    #[prost(bytes="vec", tag="6")]
    pub namespace: ::prost::alloc::vec::Vec<u8>,
    /// the public key of the sequencer
    #[prost(bytes="vec", tag="7")]
    pub sequencer_public_key: ::prost::alloc::vec::Vec<u8>,
    /// the sp1 groth16 verifier key
    #[prost(bytes="vec", tag="8")]
    pub groth16_vkey: ::prost::alloc::vec::Vec<u8>,
    /// hash-based commitment to the verifier key used for state transition
    #[prost(bytes="vec", tag="9")]
    pub state_transition_vkey: ::prost::alloc::vec::Vec<u8>,
    /// hash-based commitment to the verifier key used for state membership
    #[prost(bytes="vec", tag="10")]
    pub state_membership_vkey: ::prost::alloc::vec::Vec<u8>,
}
/// MsgCreateZKExecutionISMResponse is the response type for
/// CreateZKExecutionISM.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreateZkExecutionIsmResponse {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
/// MsgUpdateZKExecutionISM is the request type for UpdateZKExecutionISM.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateZkExecutionIsm {
    /// ism identifier
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// proof is the ZK proof bytes (groth16).
    #[prost(bytes="vec", tag="2")]
    pub proof: ::prost::alloc::vec::Vec<u8>,
    /// the public values used for proof verification.
    #[prost(bytes="vec", tag="3")]
    pub public_values: ::prost::alloc::vec::Vec<u8>,
    /// the tx signer address
    #[prost(string, tag="4")]
    pub signer: ::prost::alloc::string::String,
}
/// MsgUpdateZKExecutionISMResponse is the response type for
/// UpdateZKExecutionISM.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateZkExecutionIsmResponse {
    /// state commitment root of the remote chain
    #[prost(string, tag="1")]
    pub state_root: ::prost::alloc::string::String,
    /// latest tracked height of the remote chain
    #[prost(uint64, tag="2")]
    pub height: u64,
    /// trusted celestia header hash
    #[prost(string, tag="3")]
    pub celestia_header_hash: ::prost::alloc::string::String,
    /// trusted celestia height
    #[prost(uint64, tag="4")]
    pub celestia_height: u64,
}
/// MsgSubmitMessages is the request type for SubmitMessages.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSubmitMessages {
    /// ism identifier
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// height is the EVM application height associated with the state transition
    /// update.
    #[prost(uint64, tag="2")]
    pub height: u64,
    /// proof is the ZK proof bytes (groth16).
    #[prost(bytes="vec", tag="3")]
    pub proof: ::prost::alloc::vec::Vec<u8>,
    /// the public values used for proof verification.
    #[prost(bytes="vec", tag="4")]
    pub public_values: ::prost::alloc::vec::Vec<u8>,
    /// the tx signer address
    #[prost(string, tag="5")]
    pub signer: ::prost::alloc::string::String,
}
/// MsgSubmitMessagesResponse is the response type for SubmitMessages.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgSubmitMessagesResponse {
}
/// MsgUpdateParams is the request type for UpdateParams.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParams {
    /// authority is the address that controls the module (defaults to x/gov unless
    /// overwritten).
    #[prost(string, tag="1")]
    pub authority: ::prost::alloc::string::String,
    /// params defines the x/zkism parameters to update.
    ///
    /// NOTE: All parameters must be supplied.
    #[prost(message, optional, tag="2")]
    pub params: ::core::option::Option<Params>,
}
/// MsgUpdateParamsResponse defines the response type for UpdateParams.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamsResponse {
}
include!("celestia.zkism.v1.tonic.rs");
// @@protoc_insertion_point(module)