// @generated
// This file is @generated by prost-build.
/// Params
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Params {
}
/// HypToken ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HypToken {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub owner: ::prost::alloc::string::String,
    #[prost(enumeration="HypTokenType", tag="3")]
    pub token_type: i32,
    #[prost(string, tag="4")]
    pub origin_mailbox: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub origin_denom: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub collateral_balance: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub ism_id: ::prost::alloc::string::String,
}
/// RemoteRouter ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoteRouter {
    #[prost(uint32, tag="1")]
    pub receiver_domain: u32,
    #[prost(string, tag="2")]
    pub receiver_contract: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub gas: ::prost::alloc::string::String,
}
/// HypTokenType ...
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum HypTokenType {
    /// HYP_TOKEN_TYPE_UNSPECIFIED ...
    Unspecified = 0,
    /// HYP_TOKEN_TYPE_COLLATERAL ...
    Collateral = 1,
    /// HYP_TOKEN_TYPE_SYNTHETIC ...
    Synthetic = 2,
}
impl HypTokenType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            HypTokenType::Unspecified => "HYP_TOKEN_TYPE_UNSPECIFIED",
            HypTokenType::Collateral => "HYP_TOKEN_TYPE_COLLATERAL",
            HypTokenType::Synthetic => "HYP_TOKEN_TYPE_SYNTHETIC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HYP_TOKEN_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "HYP_TOKEN_TYPE_COLLATERAL" => Some(Self::Collateral),
            "HYP_TOKEN_TYPE_SYNTHETIC" => Some(Self::Synthetic),
            _ => None,
        }
    }
}
/// MsgCreateCollateralToken ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreateCollateralToken {
    /// owner is the message sender.
    #[prost(string, tag="1")]
    pub owner: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub origin_mailbox: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub origin_denom: ::prost::alloc::string::String,
}
/// MsgCreateCollateralTokenResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreateCollateralTokenResponse {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
/// MsgCreateSyntheticToken ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreateSyntheticToken {
    /// owner is the message sender.
    #[prost(string, tag="1")]
    pub owner: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub origin_mailbox: ::prost::alloc::string::String,
}
/// MsgCreateSyntheticTokenResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreateSyntheticTokenResponse {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
/// MsgSetToken ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSetToken {
    /// owner is the message sender.
    #[prost(string, tag="1")]
    pub owner: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub token_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub new_owner: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub ism_id: ::prost::alloc::string::String,
    #[prost(bool, tag="7")]
    pub renounce_ownership: bool,
}
/// MsgSetTokenResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgSetTokenResponse {
}
/// MsgEnrollRemoteRouter ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgEnrollRemoteRouter {
    /// owner is the message sender.
    #[prost(string, tag="1")]
    pub owner: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub token_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="3")]
    pub remote_router: ::core::option::Option<RemoteRouter>,
}
/// MsgEnrollRemoteRouterResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgEnrollRemoteRouterResponse {
}
/// MsgUnrollRemoteRouter ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUnrollRemoteRouter {
    /// owner is the message sender.
    #[prost(string, tag="1")]
    pub owner: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub token_id: ::prost::alloc::string::String,
    #[prost(uint32, tag="3")]
    pub receiver_domain: u32,
}
/// MsgUnrollRemoteRouterResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUnrollRemoteRouterResponse {
}
/// MsgRemoteTransfer ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgRemoteTransfer {
    #[prost(string, tag="1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub token_id: ::prost::alloc::string::String,
    #[prost(uint32, tag="3")]
    pub destination_domain: u32,
    #[prost(string, tag="4")]
    pub recipient: ::prost::alloc::string::String,
    #[prost(string, tag="5")]
    pub amount: ::prost::alloc::string::String,
    /// Post Dispatch
    #[prost(string, tag="6")]
    pub custom_hook_id: ::prost::alloc::string::String,
    #[prost(string, tag="7")]
    pub gas_limit: ::prost::alloc::string::String,
    #[prost(message, optional, tag="8")]
    pub max_fee: ::core::option::Option<super::super::super::cosmos::base::v1beta1::Coin>,
    #[prost(string, tag="9")]
    pub custom_hook_metadata: ::prost::alloc::string::String,
}
/// MsgRemoteTransferResponse ...
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgRemoteTransferResponse {
    #[prost(string, tag="1")]
    pub message_id: ::prost::alloc::string::String,
}
include!("hyperlane.warp.v1.tonic.rs");
// @@protoc_insertion_point(module)